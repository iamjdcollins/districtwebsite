# Generated by Django 2.0 on 2018-09-18 16:55

from django.db import migrations
import django.db.models.manager


class Migration(migrations.Migration):

    dependencies = [
        ('taxonomy', '0013_auto_20180830_1015'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='boardmeetingtype',
            options={'default_manager_name': 'base_manager', 'get_latest_by': 'update_date', 'permissions': (('trash_boardmeetingtype', 'Can soft delete board meeting type'), ('restore_boardprecinct', 'Can restore board meeting type')), 'verbose_name': 'Board Meeting Type', 'verbose_name_plural': 'Board Meeting Types'},
        ),
        migrations.AlterModelOptions(
            name='boardpolicysection',
            options={'default_manager_name': 'base_manager', 'get_latest_by': 'update_date', 'permissions': (('trash_boardpolicysection', 'Can soft delete board policy section'), ('restore_boardpolicysection', 'Can restore board policy section')), 'verbose_name': 'Board Policy Section', 'verbose_name_plural': 'Board Policy Sections'},
        ),
        migrations.AlterModelOptions(
            name='boardprecinct',
            options={'default_manager_name': 'base_manager', 'get_latest_by': 'update_date', 'permissions': (('trash_boardprecinct', 'Can soft delete board precinct'), ('restore_boardprecinct', 'Can restore board precinct')), 'verbose_name': 'Board Precinct', 'verbose_name_plural': 'Board Precincts'},
        ),
        migrations.AlterModelOptions(
            name='city',
            options={'default_manager_name': 'base_manager', 'get_latest_by': 'update_date', 'permissions': (('trash_city', 'Can soft delete city'), ('restore_city', 'Can restore city')), 'verbose_name': 'City', 'verbose_name_plural': 'Cities'},
        ),
        migrations.AlterModelOptions(
            name='districtcalendareventcategory',
            options={'default_manager_name': 'base_manager', 'get_latest_by': 'update_date', 'permissions': (('trash_districtcalendareventcategory', 'Can soft delete district calendar event category'), ('restore_districtcalendareventcategory', 'Can restore district calendar event category')), 'verbose_name': 'District Calendar Event Category', 'verbose_name_plural': 'District Calendar Event Categories'},
        ),
        migrations.AlterModelOptions(
            name='districtlogogroup',
            options={'default_manager_name': 'base_manager', 'get_latest_by': 'update_date', 'permissions': (('trash_districtlogogroup', 'Can soft delete district logo group'), ('restore_districtlogogroup', 'Can restore district logo group')), 'verbose_name': 'District Logo Group', 'verbose_name_plural': 'District Logo Groups'},
        ),
        migrations.AlterModelOptions(
            name='districtlogostylevariation',
            options={'default_manager_name': 'base_manager', 'get_latest_by': 'update_date', 'permissions': (('trash_districtlogostylevariation', 'Can soft delete district logo style variation'), ('restore_districtlogostylevariation', 'Can restore district logo style variation')), 'verbose_name': 'District Logo Style Variation', 'verbose_name_plural': 'District Logo Style Variations'},
        ),
        migrations.AlterModelOptions(
            name='language',
            options={'default_manager_name': 'base_manager', 'get_latest_by': 'update_date', 'permissions': (('trash_language', 'Can soft delete language'), ('restore_language', 'Can restore language')), 'verbose_name': 'Language', 'verbose_name_plural': 'Languages'},
        ),
        migrations.AlterModelOptions(
            name='location',
            options={'default_manager_name': 'base_manager', 'get_latest_by': 'update_date', 'permissions': (('trash_location', 'Can soft delete location'), ('restore_location', 'Can restore location')), 'verbose_name': 'Location', 'verbose_name_plural': 'Locations'},
        ),
        migrations.AlterModelOptions(
            name='openenrollmentstatus',
            options={'default_manager_name': 'base_manager', 'get_latest_by': 'update_date', 'permissions': (('trash_openenrollmentstatus', 'Can soft delete school open enrollment status'), ('restore_openenrollmentstatus', 'Can restore school open enrollment status')), 'verbose_name': 'Open Enrollment Status', 'verbose_name_plural': 'Open Enrollment Statuses'},
        ),
        migrations.AlterModelOptions(
            name='schooladministratortype',
            options={'default_manager_name': 'base_manager', 'get_latest_by': 'update_date', 'permissions': (('trash_schooladministratortype', 'Can soft delete school administrator type'), ('restore_schooladministratortype', 'Can restore school administrator type')), 'verbose_name': 'School Administrator Type', 'verbose_name_plural': 'School Administrator Types'},
        ),
        migrations.AlterModelOptions(
            name='schooloption',
            options={'default_manager_name': 'base_manager', 'get_latest_by': 'update_date', 'permissions': (('trash_schooloption', 'Can soft delete school option'), ('restore_schooloption', 'Can restore school option')), 'verbose_name': 'School Option', 'verbose_name_plural': 'School Options'},
        ),
        migrations.AlterModelOptions(
            name='schooltype',
            options={'default_manager_name': 'base_manager', 'get_latest_by': 'update_date', 'permissions': (('trash_schooltype', 'Can soft delete school type'), ('restore_schooltype', 'Can restore school type')), 'verbose_name': 'School Type', 'verbose_name_plural': 'School Types'},
        ),
        migrations.AlterModelOptions(
            name='state',
            options={'default_manager_name': 'base_manager', 'get_latest_by': 'update_date', 'permissions': (('trash_state', 'Can soft delete state'), ('restore_state', 'Can restore state')), 'verbose_name': 'State', 'verbose_name_plural': 'States'},
        ),
        migrations.AlterModelOptions(
            name='subjectgradelevel',
            options={'default_manager_name': 'base_manager', 'get_latest_by': 'update_date', 'ordering': ['inline_order'], 'permissions': (('trash_subjectgradelevel', 'Can soft delete Subject or Grade Level'), ('restore_subjectgradelevel', 'Can restore Subject or Grade Level')), 'verbose_name': 'Subject or Grade Level', 'verbose_name_plural': 'Subjects and Grade Levels'},
        ),
        migrations.AlterModelOptions(
            name='translationtype',
            options={'default_manager_name': 'base_manager', 'get_latest_by': 'update_date', 'permissions': (('trash_translationtype', 'Can soft delete translation type'), ('restore_translationtype', 'Can restore translation type')), 'verbose_name': 'Translation Type', 'verbose_name_plural': 'Translation Types'},
        ),
        migrations.AlterModelOptions(
            name='zipcode',
            options={'default_manager_name': 'base_manager', 'get_latest_by': 'update_date', 'permissions': (('trash_zipcode', 'Can soft delete zipcode'), ('restore_zipcode', 'Can restore zipcode')), 'verbose_name': 'ZIP Code', 'verbose_name_plural': 'ZIP Codes'},
        ),
        migrations.AlterModelManagers(
            name='boardmeetingtype',
            managers=[
                ('base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterModelManagers(
            name='boardpolicysection',
            managers=[
                ('base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterModelManagers(
            name='boardprecinct',
            managers=[
                ('base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterModelManagers(
            name='city',
            managers=[
                ('base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterModelManagers(
            name='districtcalendareventcategory',
            managers=[
                ('base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterModelManagers(
            name='districtlogogroup',
            managers=[
                ('base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterModelManagers(
            name='districtlogostylevariation',
            managers=[
                ('base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterModelManagers(
            name='language',
            managers=[
                ('base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterModelManagers(
            name='location',
            managers=[
                ('base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterModelManagers(
            name='openenrollmentstatus',
            managers=[
                ('base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterModelManagers(
            name='schooladministratortype',
            managers=[
                ('base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterModelManagers(
            name='schooloption',
            managers=[
                ('base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterModelManagers(
            name='schooltype',
            managers=[
                ('base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterModelManagers(
            name='state',
            managers=[
                ('base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterModelManagers(
            name='subjectgradelevel',
            managers=[
                ('base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterModelManagers(
            name='translationtype',
            managers=[
                ('base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterModelManagers(
            name='zipcode',
            managers=[
                ('base_manager', django.db.models.manager.Manager()),
            ],
        ),
    ]
